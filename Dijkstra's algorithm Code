import heapq
def compute_shortest_paths(weighted_adj_list,start_point):
    shortest_paths={key:float('inf') for key in weighted_adj_list}
    shortest_paths[start_point]=0
    exploration_queue=[(0,start_point)]
    while exploration_queue:
        path_length,active_node=heapq.heappop(exploration_queue)
        if path_length>shortest_paths[active_node]:
            continue
        for linked_node,connection_cost in weighted_adj_list[active_node].items():
            calculated_distance=path_length+connection_cost
            if calculated_distance<shortest_paths[linked_node]:
                shortest_paths[linked_node]=calculated_distance
                heapq.heappush(exploration_queue,(calculated_distance,linked_node))
    return shortest_paths
# Example usage
network_graph = {
    'A':{'B':4,'C':7},
    'B': {'A':3,'C':6,'D':6},
    'C': {'A':1,'B':1,'D':1},
    'D': {'B':9,'C':2}
}
source_node='A'
resulting_distances=compute_shortest_paths(network_graph,source_node)
print(f"Shortest paths from '{source_node}':")
for destination,distance in resulting_distances.items():
    print(f"{destination}:{distance}")
